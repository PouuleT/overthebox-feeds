<%
-- Copyright 2015 OVH (OverTheBox@ovh.net)
-- Simon Lelievre (simon.lelievre@corp.ovh.com)
-- Sebastien Duponcheel (sebastien.duponcheel@ovh.net)
--
-- This file is part of OverTheBox for OpenWrt.
--
--    OverTheBox is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    OverTheBox is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with OverTheBox.  If not, see (http://www.gnu.org/licenses/)
-- vim: set expandtab tabstop=2 shiftwidth=2 softtabstop=2 :
-%>
<%-
  local ntm = require "luci.model.network".init()
  local uci = require "luci.model.uci".cursor()

  local dev
  local devices = { "all" }
  for _, dev in luci.util.vspairs(luci.sys.net.devices()) do
    if dev ~= "lo" and not ntm:ignore_interface(dev) then
      if uci:get("network", dev, "type") == "tunnel" then
        devices[#devices+1] = dev
      end
    end
  end

  local curdev = luci.dispatcher.context.requestpath
  curdev = curdev[#curdev] ~= "qos" and curdev[#curdev] or devices[1]
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript" src="<%=resource%>/jquery-1.11.3.min.js"></script>
<script type="text/javascript" src="<%=resource%>/bootstrap.min.js"></script>
<script type="text/javascript" src="<%=resource%>/seedrandom.js"></script>
<script type="text/javascript" src="<%=resource%>/ovh/scripts/graph.js"></script>
<script type="text/javascript">

function graph(direction, data, Gup, polygons) {
  var data_max   = 0;
  var data_scale = 0;

  var direction_short = direction == "upload" ? 'tx' : 'rx';

  // intialize upline datas for upload
  var upline   = { };
  var downline = { };
  var lastLine = [];

  // Fetch data and update values
  for(var queue in data)
  {
    for(var itf in data[queue])
    {
      var data_avg = 0;
      var data_peak = 0;

      if (!upline[queue]) {
        upline[queue] = [];
      }
      upline[queue][itf]  = [ ];
      if (!downline[queue]) {
        downline[queue] = [];
      }
      downline[queue][itf]= [ ];

      for (var i = 0; i < data[queue][itf].length; i++)
      {
        if (!lastLine[i]) {
          lastLine[i] = 0;
        }
        var tx_bot = lastLine[i];

        downline[queue][itf][i] = tx_bot;

        upline[queue][itf][i] = data[queue][itf][i] + tx_bot;

        lastLine[i] = upline[queue][itf][i];

        data_peak = Math.max(data_peak, data[queue][itf][i]);
        data_max = Math.max(data_max, upline[queue][itf][i]);

        if (i > 0)
        {
          data_avg = (data_avg + data[queue][itf][i]) / 2;
        }
        else
        {
          data_avg = data[queue][itf][i];
        }
      }

      var prefix = queue + '_' + itf + '_' + direction;
      if(document.getElementById(prefix + '_cur'))
      {
        var label = document.getElementById(prefix + '_cur');
        label.innerHTML = bandwidth_label(data[queue][itf][data[queue][itf].length-1]);
      }
      if(label = document.getElementById(prefix + '_avg'))
      {
        label.innerHTML = bandwidth_label(data_avg);
      }
      if(document.getElementById(prefix + '_peak'))
      {
        var label = document.getElementById(prefix + '_peak');
        label.innerHTML = bandwidth_label(data_peak);
      }
    }
  }

  // Update stats labels
  data_scale = height / (data_max * 1.1);

  // Graph!
  for(var queue in upline)
  {
    for (var itf in upline[queue])
    {
      var y = 0;
      var pt = '0,' + height;

      // draw polygon
      for (var i = 0; i < upline[queue][itf].length; i++)
      {
        var x = i * step;

        y = height - Math.floor((upline[queue][itf][i]) * data_scale);
        pt += ' ' + x + ',' + y;
      }
      // draw last tangant point in upline graph
      pt += ' ' + width + ',' + y;
      pt += ' ' + width + ',' + height;

      for (var i = downline[queue][itf].length - 1; i >= 0; i--)
      {
        var x = i * step;

        y = height - Math.floor((downline[queue][itf][i] - 10) * data_scale);
        if(i == downline[queue][itf].length - 1)
        {
          pt += ' ' + width + ',' + height;
          pt += ' ' + width + ',' + y;
        }
        pt += ' ' + x + ',' + y;
      }
      // go back to right bottom corner to correctly fill polyline
      pt += ' ' + 0 + ',' + height;
      pt += ' ' + width + ',' + height;
      // Draw polygon
      polygons[queue][itf].setAttribute('points', pt);

      $("#"+direction_short+"_label_25").html(bandwidth_label(1.1 * 0.25 * data_max, true));
      $("#"+direction_short+"_label_50").html(bandwidth_label(1.1 * 0.50 * data_max, true));
      $("#"+direction_short+"_label_75").html(bandwidth_label(1.1 * 0.75 * data_max, true));
    }
  }
}

function createQosStatsValue(direction, qdisc, name){
  // Create Cur, Avg, Peak cells
  var s_type = ["cur", "avg", "peak"];
  s_type.forEach(function(stype) {
    if(!document.getElementById('id', qdisc + '_' + name + '_' + direction + '_' + stype)) {
      var stats = document.getElementById(stype + '_' + qdisc + '_' + direction);
      if(stats) {
        var liValue = document.createElement("li");

        var label1 = document.createElement("label");
        label1.appendChild(document.createTextNode(name+': '));
        liValue.appendChild(label1);

        var spanValue = document.createElement("span");
        spanValue.className = "value";
        spanValue.setAttribute('id', qdisc + '_' + name + '_' + direction + '_' + stype);
        liValue.appendChild(spanValue);

        stats.appendChild(liValue);
      }
    }
  });
}

function createQosStatsFooter(direction, qdisc, color, interfaces){
  var table = document.getElementById(direction + '_stats');
  // Group queue per queue
  var tr = document.getElementById(qdisc + '_' + direction);
  var s_type = ["cur", "avg", "peak"];
  // Create the Queue row
  if(!tr) {
    tr = table.insertRow();
    // Create cells of the table
    var qdisclabel = tr.insertCell(0);

    var strong = document.createElement('strong');
    strong.appendChild(document.createTextNode(qdisc));
    strong.setAttribute('style', 'border-bottom:2px solid ' + color);
    qdisclabel.appendChild(strong);

    s_type.forEach(function(stype){
      var stats = tr.insertCell(-1);
      var ul = document.createElement("ul");
      ul.setAttribute('style', 'list-style: none;');
      ul.setAttribute('id', stype + '_' + qdisc + '_' + direction);
      stats.appendChild(ul);
    });
    tr.setAttribute('id', qdisc + '_' + direction);
    for (var itf in interfaces) {
      createQosStatsValue(direction, qdisc, interfaces[itf]);
    }
  }

}
</script>

<script type="text/javascript">//<![CDATA[

$(function(){
  $("#ddlInterface").change(function() {
    window.location.href = this.value;
  });
});

var normalPriorityString = "Normal"
var latencyPriorityString = "Latency - VoIP"
var lowPriorityString = "Low priority"
var highPriorityString = "High priority"

function stringToColour(str) {
  if(str == latencyPriorityString)
    return "Red";
  if(str == highPriorityString)
    return "Orange";
  if(str == normalPriorityString)
    return "LightGreen";
  if(str == lowPriorityString)
    return "DarkOliveGreen";

  // Generate a color folowing the name
  Math.seedrandom(str);
  var rand = Math.random() * Math.pow(255,3);
  Math.seedrandom(); // don't leave a non-random seed in the generator
  for (var i = 0, colour = "#"; i < 3; colour += ("00" + ((rand >> i++ * 8) & 0xFF).toString(16)).slice(-2));
  return colour;
}

var all = true;
var bwxhr = new XHR();

//var Gdn;
var Gup;

var TIME = 0;
var RXB  = 1;
var RXP  = 2;
var TXB  = 3;
var TXP  = 4;

var width  = 760;
var height = 300;
var step   = 5;

var data_wanted = Math.floor(width / step);

var data_fill   = 0;
var data_stamp  = 0;

var label_25;
var label_50;
var label_75;

var label_scale;

var def;
var dnPolygons 	= {};
var dndata	= {};
var upPolygons 	= {};
var updata  	= {};

/* Smoother */
function simple_moving_averager(name, period) {
  var nums = {}
  nums[name] = [];
  return function(num) {
    nums[name].push(num);
    if (nums[name].length > period)
      nums[name].splice(0,1);  // remove the first element of the array
    var sum = 0;
    for (var i in nums[name])
      sum += nums[name][i];
    var n = period;
    if (nums[name].length < period)
      n = nums[name].length;
    return(sum/n);
  }
}

/* wait for SVG */
window.setTimeout(
    function() {
      var dnsvg = document.getElementById('dnsvg');
      var upsvg = document.getElementById('upsvg');

      try {
        Gdn = dnsvg.getSVGDocument ? dnsvg.getSVGDocument() : dnsvg.contentDocument;
        Gup = upsvg.getSVGDocument ? upsvg.getSVGDocument() : upsvg.contentDocument;
      }
      catch(e) {
        Gdn = document.embeds['dnsvg'].getSVGDocument();
        Gup = document.embeds['upsvg'].getSVGDocument();
      }

      if (!Gdn || !Gup)
      {
        window.setTimeout(arguments.callee, 1000);
      }
      else
      {
        /* find sizes */
        width       = upsvg.offsetWidth  - 2;
        height      = upsvg.offsetHeight - 2;
        data_wanted = Math.ceil(width / step);

        labeldn_scale   = document.getElementById('dnscale');
        labelup_scale   = document.getElementById('upscale');

        /* plot horizontal time interval lines */
        for (var i = width % (step * 60); i < width; i += step * 60)
        {

          var linedn = Gdn.createElementNS('http://www.w3.org/2000/svg', 'line');
          linedn.setAttribute('x1', i);
          linedn.setAttribute('y1', 0);
          linedn.setAttribute('x2', i);
          linedn.setAttribute('y2', '100%');
          linedn.setAttribute('style', 'stroke:black;stroke-width:0.1');
          Gdn.getElementById('label_25').parentNode.appendChild(linedn);

          var lineup = Gup.createElementNS('http://www.w3.org/2000/svg', 'line');
          lineup.setAttribute('x1', i);
          lineup.setAttribute('y1', 0);
          lineup.setAttribute('x2', i);
          lineup.setAttribute('y2', '100%');
          lineup.setAttribute('style', 'stroke:black;stroke-width:0.1');
          Gup.getElementById('label_25').parentNode.appendChild(lineup);

          var labelContent = Math.round((width - i) / step / 60) + 'm';
          insertXAxisValue($("div#dn-x-axis-info"), labelContent, 0, i - 5);
          insertXAxisValue($("div#up-x-axis-info"), labelContent, 0, i - 5);
        }

        labeldn_scale.innerHTML = String.format('<%:(%d minutes window, %d seconds interval)%>', 3, data_wanted / 60);
        labelup_scale.innerHTML = String.format('<%:(%d minutes window, %d seconds interval)%>', 3, data_wanted / 60);

        /* render datasets, start update interval */
        XHR.poll(3, '<%=build_url("admin/overthebox/qos_stats", curdev)%>', null,
            function(x, dataarray)
            {
              var data = {};

              // Sort timestamp
              var timestamps = Object.keys(dataarray);
              timestamps.sort();

              // Create and initialize qdisc graphic elements
              for(var qdisc in dataarray[timestamps[timestamps.length - 1]]["upload"])
              {
                var color = stringToColour(qdisc);
                /* prefill datasets */
                if (!updata[qdisc]) {
                  updata[qdisc] = [ ];
                }

                createQosStatsFooter("upload", qdisc, color, Object.keys(dataarray[timestamps[timestamps.length - 1]]["upload"][qdisc]));

                if(typeof upPolygons[qdisc] != "object")
                {
                  upPolygons[qdisc] = [];
                }
                for(var itf in dataarray[timestamps[timestamps.length - 1]]["upload"][qdisc])
                {
                  if(typeof upPolygons[qdisc][itf] != "object")
                  {
                    updata[qdisc][itf] = [ ];
                    for (var i = 0; i < data_wanted; i++)
                    {
                      updata[qdisc][itf][i] = 0;
                    }

                    var upline = Gup.createElementNS('http://www.w3.org/2000/svg', 'polyline');
                    upline.setAttributeNS(null, 'id', 'tx_' + qdisc + "_" + itf);
                    upline.setAttributeNS(null, 'style', 'fill:' + color + ';fill-opacity: 0.6;stroke:black;stroke-width:0.1');
                    Gup.getElementById('tx').parentNode.appendChild(upline);
                    upPolygons[qdisc][itf] = Gup.getElementById('tx_' + qdisc + "_" + itf);
                  }
                }
              }
              for(var qdisc in dataarray[timestamps[timestamps.length - 1]]["download"])
              {
                var color = stringToColour(qdisc);
                /* prefill datasets */
                if (!dndata[qdisc]) {
                  dndata[qdisc] = [ ];
                }

                createQosStatsFooter("download", qdisc, color, Object.keys(dataarray[timestamps[timestamps.length - 1]]["download"][qdisc]));

                if(typeof dnPolygons[qdisc] != "object")
                {
                  dnPolygons[qdisc] = [];
                }
                for(var itf in dataarray[timestamps[timestamps.length - 1]]["download"][qdisc])
                {
                  if(typeof dnPolygons[qdisc][itf] != "object")
                  {
                    dndata[qdisc][itf] = [ ];
                    for (var i = 0; i < data_wanted; i++)
                    {
                      dndata[qdisc][itf][i] = 0;
                    }

                    var dnline = Gdn.createElementNS('http://www.w3.org/2000/svg', 'polyline');
                    dnline.setAttributeNS(null, 'id', 'rx_' + qdisc + "_" + itf);
                    dnline.setAttributeNS(null, 'style', 'fill:' + color + ';fill-opacity: 0.6;stroke:black;stroke-width:0.1');
                    Gdn.getElementById('rx').parentNode.appendChild(dnline);
                    dnPolygons[qdisc][itf] = Gdn.getElementById('rx_' + qdisc + "_" + itf);
                  }
                }
              }

              // compute data point
              for(var i= data_stamp ? 0 : 1; i < timestamps.length; i++)
              {
                if ( timestamps[i] <= data_stamp)
                  continue;
                if (i > 0)
                {
                  var time_delta = timestamps[i] - timestamps[i-1];
                  if(time_delta)
                  {
                    for(var qdisc in dataarray[timestamps[i]]["upload"])
                    {
                      // Compute datapoint : add all interfaces bytes counters
                      var upload = 0;
                      for(var intf in dataarray[timestamps[i]]["upload"][qdisc])
                      {
                        if((typeof dataarray[timestamps[i]]["upload"][qdisc][intf] !== "undefined")
                            && (typeof dataarray[timestamps[i-1]]["upload"][qdisc] !== "undefined")
                            && (typeof dataarray[timestamps[i-1]]["upload"][qdisc][intf] !== "undefined")) {
                          var upload_intf = (Number(dataarray[timestamps[i]]["upload"][qdisc][intf].bytes) - Number(dataarray[timestamps[i-1]]["upload"][qdisc][intf].bytes)) / time_delta;
                          if(!updata[qdisc][intf]){
                            updata[qdisc][intf] = [];
                          }
                          updata[qdisc][intf].push(upload_intf);
                          upload += upload_intf;
                        }
                      }
                    }
                    for(var qdisc in dataarray[timestamps[i]]["download"])
                    {
                      // Compute datapoint : add all interfaces bytes counters
                      var download = 0;
                      for(var intf in dataarray[timestamps[i]]["download"][qdisc])
                      {
                        if((typeof dataarray[timestamps[i]]["download"][qdisc][intf] !== "undefined")
                            && (typeof dataarray[timestamps[i-1]]["download"][qdisc] !== "undefined")
                            && (typeof dataarray[timestamps[i-1]]["download"][qdisc][intf] !== "undefined")) {
                          var download_intf = (Number(dataarray[timestamps[i]]["download"][qdisc][intf].bytes) - Number(dataarray[timestamps[i-1]]["download"][qdisc][intf].bytes)) / time_delta;
                          if(!dndata[qdisc][intf]){
                            dndata[qdisc][intf] = [];
                          }
                          dndata[qdisc][intf].push(download_intf);
                          download += download_intf;
                        }
                      }
                    }
                  }
                }
                data_stamp = Math.max(data_stamp, timestamps[i])
              }

              for(var qdisc in dataarray[timestamps[timestamps.length - 1]]["upload"])
              {
                for(var itf in dataarray[timestamps[timestamps.length - 1]]["upload"][qdisc])
                {
                  updata[qdisc][itf] = updata[qdisc][itf].slice(updata[qdisc][itf].length - data_wanted, updata[qdisc][itf].length);
                }
              }
              for(var qdisc in dataarray[timestamps[timestamps.length - 1]]["download"])
              {
                for(var itf in dataarray[timestamps[timestamps.length - 1]]["download"][qdisc])
                {
                  dndata[qdisc][itf] = dndata[qdisc][itf].slice(dndata[qdisc][itf].length - data_wanted, dndata[qdisc][itf].length);
                }
              }

              graph('upload', updata, Gup, upPolygons);
              graph('download', dndata, Gdn, dnPolygons);
            }
        );
      }
    }, 1000
);

// Set 1h reload page timer because of suspected SVG graph memmory leak
window.setTimeout(function()
    {
      if (activating == false)
        location.reload(true)
    }, 3600000)

//]]></script>

<link rel="stylesheet" type="text/css" href="<%=resource%>/ovh/css/ovh-common.css">

<script type="text/javascript">
document.write('\
    <style type="text/css">\
.free1::before{\
  content: "--";\
  color:  '+ stringToColour("free1") +';\
  font-weight: bold;\
  font-size: 20px;\
  margin-right: 5px;\
}\
.ovh1::before{\
  content: "--";\
  color:  '+ stringToColour("ovh1") +';\
  font-weight: bold;\
  font-size: 20px;\
  margin-right: 5px;\
}\
.ovh2::before{\
  content: "--";\
  color:  '+ stringToColour("ovh2") +';\
  font-weight: bold;\
  font-size: 20px;\
  margin-right: 5px;\
}\
.if1::before{\
  content: "--";\
  color:  '+ stringToColour("if1") +';\
  font-weight: bold;\
  font-size: 20px;\
  margin-right: 5px;\
}\
.if2::before{\
  content: "--";\
  color: '+ stringToColour("if2") +';\
  font-weight: bold;\
  font-size: 20px;\
  margin-right: 5px;\
}\
.if3::before{\
  content: "--";\
  color:  '+ stringToColour("if3") +';\
  font-weight: bold;\
  font-size: 20px;\
  margin-right: 5px;\
}\
.if4::before{\
  content: "--";\
  color:  '+ stringToColour("if4") +';\
  font-weight: bold;\
  font-size: 20px;\
  margin-right: 5px;\
}\
.if5::before{\
  content: "--";\
  color: '+ stringToColour("if5") +';\
  font-weight: bold;\
  font-size: 20px;\
  margin-right: 5px;\
}\
    </style>'
    );
</script>

<h2><%:Traffic Control%></h2>

<div class="graph-section">
  <div class="title"><%:Upload%></div>
  <div class="graph-main">
    <div class="graph-y-axis-info" style="height: 265px;">
      <div class="label-25" id="tx_label_25">-</div>
      <div class="label-50" id="tx_label_50">-</div>
      <div class="label-75" id="tx_label_75">-</div>
    </div>
    <div class="graph-visual">
      <embed id="upsvg"  class="svg-graph" style="width:100%; height:265px;" src="<%=resource%>/bandwidth.svg" />
        <div class="graph-time-scale" style="text-align:right"><small id="upscale">-</small></div>
    </div>
    <div id="up-x-axis-info" class="graph-x-axis-info"></div>
  </div>
  <div class="graph-footer">
    <table style="width:100%; table-layout:fixed" cellspacing="5" id="upload_stats">
      <tr>
        <td></td>
        <td><strong><%:Current%></strong></td>
        <td><strong><%:Average%></strong></td>
        <td><strong><%:Peak%></strong></td>
      </tr>
    </table>
  </div>
  <div class="clear"></div>
</div>

<div class="graph-section">
  <div class="title"><%:Download%></div>
  <div class="graph-main">
    <div class="graph-y-axis-info" style="height: 265px;">
      <div class="label-25" id="rx_label_25">-</div>
      <div class="label-50" id="rx_label_50">-</div>
      <div class="label-75" id="rx_label_75">-</div>
    </div>
    <div class="graph-visual">
      <embed id="dnsvg"  class="svg-graph" style="width:100%; height:265px;" src="<%=resource%>/bandwidth.svg" />
        <div class="graph-time-scale" style="text-align:right"><small id="dnscale">-</small></div>
    </div>
    <div  id="dn-x-axis-info" class="graph-x-axis-info"></div>
  </div>
  <div class="graph-footer">
    <table style="width:100%; table-layout:fixed" cellspacing="5" id="download_stats">
      <tr>
        <td></td>
        <td><strong><%:Current%></strong></td>
        <td><strong><%:Average%></strong></td>
        <td><strong><%:Peak%></strong></td>
      </tr>
    </table>
  </div>
  <div class="clear"></div>
</div>

<%+footer%>
